package gui.range_specifying.dateAndTime;
import java.awt.Container;
import java.awt.Rectangle;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.ParseException;
import java.util.Calendar;

import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.SwingUtilities;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.text.DateFormatter;

import gui.range_specifying.dateAndTime.DateAndTimeParameters.StartOrEnd.AllLabelParameters;
import gui.range_specifying.dateAndTime.DateAndTimeParameters.StartOrEnd.AllSpinnerParameters;




public class DateAndTimeSetterGuiController extends DateAndTimeParameters
{	
	class Spinners
	{
		JSpinner year, month, date, time;
		public void setEnabled(boolean true_or_false)
		{
			year.setEnabled(true_or_false);
			month.setEnabled(true_or_false);
			date.setEnabled(true_or_false);
			time.setEnabled(true_or_false);
		}
	}
	
	
	class SpinnersAndCommonModel {
		Spinners spinners;
		SpinnerCommonDateModel common_model;
	}	
	
	
	class StartAndEndSpinners {
		SpinnersAndCommonModel start, end;		
	}
	
	private StartAndEndSpinners start_and_end_spinners;
	private Container container;
	
	
	public DateAndTimeSetterGuiController()
	{
		start_and_end_spinners = new StartAndEndSpinners();
	}	
	
	
	
	public void addDateAndTimeSetterTo(Container container)
	{
		this.container = container;
		start_and_end_spinners.start = addDateAndTimeSetter(DateAndTimeParameters.START);
		start_and_end_spinners.end = addDateAndTimeSetter(DateAndTimeParameters.END);
	}
	
	
	
	private SpinnersAndCommonModel addDateAndTimeSetter(StartOrEnd start_or_end)
	{
		SpinnersAndCommonModel spinners;
		
		addLabel(start_or_end.title);
		spinners = addAllSpinners(start_or_end.spinners);
		addAllLabels(start_or_end.labels);
		return spinners;
	}
	
	
	private void addAllLabels(AllLabelParameters param)
	{
		addLabel(param.year);
		addLabel(param.month);
		addLabel(param.date);
	}
	
	
	
	private void addLabel(LabelParameters param)
	{
		JLabel label;
		label = new JLabel(param.string);
		label.setBounds(param.bounds);
		container.add(label);		
	}



	private SpinnersAndCommonModel addAllSpinners(AllSpinnerParameters start_or_end)
	{
		SpinnersAndCommonModel spinners_and_common_model;
		Spinners spinners;
		SpinnerCommonDateModel common_model;
		spinners_and_common_model = new SpinnersAndCommonModel();
		spinners = new Spinners();
		common_model = new SpinnerCommonDateModel();
		start_or_end.common.model = common_model;
		
		
		
		spinners.year = addSpinner(start_or_end.year);
		spinners.month = addSpinner(start_or_end.month);
		spinners.date = addSpinner(start_or_end.date);
		spinners.time = addSpinner(start_or_end.time);
		
		
		spinners_and_common_model.spinners = spinners;
		spinners_and_common_model.common_model = common_model;
		
		return spinners_and_common_model;
	}	
	
	
	private JSpinner addSpinner(SpinnerParameters param)//, SpinnerCommonDateModel common_model)
	{
		JSpinner spinner;
		Rectangle bounds;
		SpinnerCommonDateModel common_model;
		String format; int fields[];
		JSpinner.DateEditor editor;
		JFormattedTextField text_field; DateFormatter formatter;
		
		
		bounds = param.bounds;
		format = param.FORMAT;
		fields = param.FIELDS;
		common_model = param.COMMON.model;
		
		
		spinner = new JSpinner();		
		spinner.setBounds(bounds);
		spinner.setEnabled(false);
		
		spinner.setModel(common_model);
		editor = new JSpinner.DateEditor(spinner, format);
		spinner.setEditor(editor);
		text_field = editor.getTextField();
		text_field.setHorizontalAlignment(JFormattedTextField.CENTER);
		text_field.addFocusListener( new FocusListener() {
				@Override
				public void focusGained(FocusEvent arg0) {			
					common_model.setFields(fields);
					common_model.setTextField(text_field);
					SwingUtilities.invokeLater(new Runnable() {
			            @Override
			            public void run() {
			            	text_field.selectAll();
			            }
			        });				
				}	
				@Override
				public void focusLost(FocusEvent arg0) {
					//text_field.setValue(common_model.getCalendar().getTime());
					common_model.setEdittedFields(fields);
					common_model.setTextField(text_field);
					try {
						text_field.commitEdit();						
					} catch (ParseException e) {						
						text_field.setValue(common_model.getCalendar().getTime());
					}
				}
			});
		text_field.addMouseListener(new MouseListener() {
			@Override
			public void mouseClicked(MouseEvent arg0)
			{
				text_field.selectAll();
			}

			@Override
			public void mouseEntered(MouseEvent arg0)
			{
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent arg0)
			{
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mousePressed(MouseEvent arg0)
			{
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseReleased(MouseEvent arg0)
			{
				// TODO Auto-generated method stub
				
			}			
		});
		
		
		formatter = (DateFormatter)text_field.getFormatter();
		formatter.setAllowsInvalid(true); // this makes what you want
		formatter.setOverwriteMode(false);
		formatter.setCommitsOnValidEdit(false);
		
		container.add(spinner);		
		return spinner;
	}	
	
	public void setStartAndEndCalendar(Calendar start_calendar, Calendar end_calendar)
	{
		start_and_end_spinners.start.common_model.setCalendar(start_calendar);
		start_and_end_spinners.end.common_model.setCalendar(end_calendar);
	}



	public void setEnabled(boolean true_or_false)
	{
		
		start_and_end_spinners.start.spinners.setEnabled(true_or_false);
		start_and_end_spinners.end.spinners.setEnabled(true_or_false);
	}	
}
